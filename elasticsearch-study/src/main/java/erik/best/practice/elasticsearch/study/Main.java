/** * Alipay.com Inc. * Copyright (c) 2004-2021 All Rights Reserved. */package erik.best.practice.elasticsearch.study;import com.alibaba.fastjson.JSON;import org.apache.http.HttpEntity;import org.apache.http.HttpHost;import org.apache.http.auth.AuthScope;import org.apache.http.auth.UsernamePasswordCredentials;import org.apache.http.client.CredentialsProvider;import org.apache.http.impl.client.BasicCredentialsProvider;import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;import org.apache.http.nio.entity.NStringEntity;import org.apache.http.util.EntityUtils;import org.elasticsearch.client.Node;import org.elasticsearch.client.Request;import org.elasticsearch.client.Response;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestClient.FailureListener;import org.elasticsearch.client.RestClientBuilder;import org.elasticsearch.client.RestClientBuilder.HttpClientConfigCallback;import java.io.IOException;/** * @author yueyi * @version : Main.java, v 0.1 2021年09月29日 4:38 下午 yueyi Exp $ */public class Main {    /**     * es使用的第一个用例     *     * @param args     * @throws IOException     */    public static void main(String[] args) throws IOException {        RestClient restClient = initialRestClient();        //直接用在devTool可用的请求体就好了。        Request request = new Request("GET", "/my-index-geo-point/_search");        request.setJsonEntity(""                + "{\n"                + "  \"query\": {\n"                + "    \"match_all\": {}\n"                + "  },\n"                + "  \"stored_fields\" : [ \"_source\" ],\n"                + "  \"script_fields\" : {\n"                + "      \"与天安门的距离/m\" : {\n"                + "        \"script\":{\n"                + "          \"lang\": \"painless\",\n"                + "         \"params\" : {\n"                + "            \"lat\" : 39.915119,\n"                + "            \"lon\" : 116.403963\n"                + "         },\n"                + "         \"source\" : \"doc['location'].arcDistance(params.lat, params.lon)\"\n"                + "        }\n"                + "      }\n"                + "   }\n"                + "}");        Response response = restClient.performRequest(request);        //注意，不能直接打印出response中的内容        System.out.println(JSON.toJSONString(response, true));        String responseBody = EntityUtils.toString(response.getEntity());        JSON.parseObject(responseBody);        System.out.println(JSON.toJSONString(JSON.parseObject(responseBody), true));        closeResultWithCatchException(restClient);    }    private static void closeResultWithCatchException(RestClient restClient) {        try {            restClient.close();        } catch (IOException e) {            e.printStackTrace();        }    }    private static RestClient initialRestClient() {        RestClientBuilder restClientBuilder = RestClient                .builder(new HttpHost("localhost", 9200, "http"));        restClientBuilder.setFailureListener(new FailureListener() {            @Override            public void onFailure(Node node) {                System.out.println("es_rest_call 调用失败了. node=" + node.toString());            }        });        final CredentialsProvider credentialsProvider =                new BasicCredentialsProvider();        credentialsProvider.setCredentials(AuthScope.ANY,                new UsernamePasswordCredentials("elastic", "xmly2017erik"));        restClientBuilder.setHttpClientConfigCallback(                httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));        RestClient restClient = restClientBuilder.build();        return restClient;    }}